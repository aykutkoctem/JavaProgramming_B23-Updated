Java Boot Camp

	Topics:
		1. Primitives: int, double, char, boolean
		2. Primitive Type Castings: Implicit vs Explicit
		3. Wrapper class
		4. String
		5. String vs StringBuilder vs StringBuffer
		6. Loops: for & while
		7. Array
		8. for each loop
		9. Custom Methods
		10. Method Overloading
		11. Constructor
		12. Class & Objects
		13. Static vs Instance
		14. Import Statements
		15. Access Modifiers
		16. OOP Encapsulations
		17. OOP Inheritance
		18. Method Overriding
		19. Final keyword
		20. OOP Abstraction
		21. Abstract Class vs Interface
		22. OOP Polymorphism
		23. Reference Type Castings: Upcasting vs DownCasting
		24. Exceptions: checked & unchecked
		25. Exception Handlings
		26. final vs finally vs finalize
		27. garbage collection & garbage collector
		28. Collections: List, Set
		29. Iterable & Iterator
		30. Maps



1. Primitives:  byte < short < int < long < float < double
				char, boolean 

				byte a = 12;


2. primitive casting:
		
		implicit casting: casting smaller primitive type to larger primitive type

				short s = 10;
				long l = s;

		explicit casting: casting larger primitive type to smaller

				int x = 100;
				byte y = (byte)x;


3. Wrapper Classes: the objects type of the primitives. 
		
		Byte, Short, Integer, Long, Float, Double, Character, Boolean

		autoboxing: promitive to object
		unboxing: object to primitive


4. String: Immutable version of char sequences
		
		substring(), charAt(), lowerCase&upperCase(),  replace(), contains(), equals()...

5. StringBuilder & StringBuffer: mutable version of char sequences

		StringBuilder: not Synchronized

		StringBuffer: slower, synchronized ===> Thread-Safe


6. Loops: repeating
		
		for loop: if the number of iteration is fixed

					 int i = 0;        i < 10;		i++
				for(initialization;  Conidition;  Iterator){

				}



		while loop: if the number of iteration is NOT fixed

				while(result.hasNext()){

				}


		do-while loop: at least gets executed once, even if the condition is false


7. Array: size is fixed. fast
		 supports both primitives & non-primitives
		 can be multi-dimensional


8. for each loop: there must be a data structure
				  Iteration order is fixed

				  for(DataType  name  : Data Structure){

				  }


9. Custom Methods:  Function. Grouping the code fragements to perform a task
				
				improves the reusability of our codes

			declare:
				AM  Specifier  ReturnType  MethodName(Parameter){
						Code Fragments;
				}


10. Method Overloading: multiple methods sharing the same method name
						Method name must be same, parameters MUST be different


11. Constructor: Special Methods. Name MUST be same with class name
				used for creating the objects of the class

				execution depdends on the object

				

				Declare:
					AM  ClassName(Parameter){
						Codes;
					}


				object:
					new Constructor()


			BasePage:

				public BasePage(){
					PageFactory.InitElements( driver,  this);
				}


				@FindBy


			HomePage extends Basepage



12. Class & Object: class is a template of objects, where the objects came from, specifies what object should contain.
					Object is instance of a class, each object has its own memory


13. Static VS Instance: 
			
			instance: belongs to the object. there are multiple copies, each object has its own copy

			static: belongs to the class. there is ONLY one copy for all the objects of the class



14. Import Statements:
		
		regualr imports:

			import package.class;
			import package.*;


		static imports: only imports static members

			import static package.class.staticMember;
			import static package.class.*;








